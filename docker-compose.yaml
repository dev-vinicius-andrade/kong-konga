version: "3."
networks:
  kong-net:
services:
  konga:
    image: pantsel/konga
    container_name: konga
    depends_on:
      kong:
        condition: service_started
      db:
        condition: service_started
    environment:
      NODE_ENV: production
      DB_ADAPTER: ${KONGA_DB_TYPE:-postgres}
      DB_USER: ${KONGA_DB_USER:-konga}
      DB_PASSWORD: ${KONGA_DB_PASSWORD:-konga}
      DB_HOST: ${KONGA_DB_HOST:-db}
      DB_PORT: ${KONGA_DB_PORT:-5432}
      DB_DATABASE: ${KONGA_DB_DATABASE:-konga}
      KONGA_SEED_USER_DATA_SOURCE_FILE: ${KONGA_SEED_USER_DATA_SOURCE_FILE:-/usr/share/konga/data/default_users_db.data}
      KONGA_SEED_KONG_NODE_DATA_SOURCE_FILE: ${KONGA_SEED_KONG_NODE_DATA_SOURCE_FILE:-/usr/share/konga/data/default_kong_node.data}
      PORT: ${KONGA_SERVICE_PORT:-1337}
    networks:
      - kong-net
    restart: unless-stopped
    volumes:
      - konga-data:/app/kongadata
    env_file:
      - ./.env.local
  kong:
    image: "kong"
    container_name: kong
    depends_on:
      db:
        condition: service_started
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:${KONG_ADMIN_PORT:-8001}"
      KONG_CASSANDRA_CONTACT_POINTS: ${DB_HOST:-db}
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_DB_DATABASE}
      KONG_PG_HOST: ${KONG_DB_HOST:-db}
      KONG_PG_PORT: ${KONG_DB_PORT:-5432}
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD}
      KONG_PG_USER: ${KONG_DB_USER}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: 0.0.0.0:80
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:443
    networks:
      - kong-net
    ports:
      - "${KONG_HTTP_PORT}:80/tcp"
      - "${KONG_HTTPS_PORT}:443/tcp"
    restart: unless-stopped
    env_file:
      - ./.env.local
    volumes:
      - kong-banner-conf:/opt/bitnami/apps/bitnami/banner/conf
  db:
    image: postgres:11-bullseye
    environment:
      POSTGRES_USER: ${DB_ADMIN_USER}
      POSTGRES_PASSWORD: ${DB_ADMIN_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_ADMIN_USER}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: unless-stopped
    networks:
      - kong-net
    volumes:
      - db-data:/var/lib/postgresql/data
    env_file:
      - ./.env.local
  sample-api:
    image: vad1mo/hello-world-rest
    container_name: sample-api
    networks:
      - kong-net
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      node.name: elasticsearch
      network.host: 0.0.0.0
      xpack.security.enabled: true
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
    networks:
      - kong-net
    restart: unless-stopped
    env_file:
      - ./.env.local
  logstash:
    image: docker.elastic.co/logstash/logstash:${ELASTIC_VERSION}
    volumes:
      - ./configurations/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./configurations/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
    networks:
      - kong-net
    depends_on:
      elasticsearch: # Wait for Elasticsearch to start up before starting Logstash.
        condition: service_started
    restart: unless-stopped
    links:
      - elasticsearch
    env_file:
      - ./.env.local
  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    volumes:
      - ./configurations/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - kong-net
    depends_on:
      elasticsearch: # Wait for Elasticsearch to start up before starting Kibana.
        condition: service_started
    restart: unless-stopped
    links:
      - elasticsearch
    env_file:
      - ./.env.local
volumes:
  konga-data:
    driver: local
    driver_opts:
      o: bind create_host_path=true
      type: none
      device: ./container_volumes/konga/data
  kong-banner-conf:
    driver: local
    driver_opts:
      o: bind create_host_path=true
      type: none
      device: ./container_volumes/kong/banner/conf
  db-data:
    driver: local
    driver_opts:
      o: bind create_host_path=true
      type: none
      device: ./container_volumes/db/data
  elasticsearch-data:
    driver: local
    driver_opts:
      o: bind create_host_path=true
      type: none
      device: ./container_volumes/elasticsearch/data
